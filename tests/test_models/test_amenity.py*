#!/usr/bin/python3
import unittest
from models.amenity import Amenity
"""
Defines Amenity class Module.
"""


class TestAmenity(unittest.TestCase):
    """Unittest case for Amenity class."""

    def test_object_Instantiation(self):
        """instantiates class."""
    my_amenity = Amenity()

    def testattribute(self):
        """Used to test Class: Amenity attributes."""
        self.amenity = Amenity()
        self.assertTrue(hasattr(my_amenity, "created_at"))
        self.assertTrue(hasattr(my_amenity, "updated_at"))
        self.assertFalse(hasattr(my_amenity, "random_attr"))
        self.assertTrue(hasattr(my_amenity, "name"))
        self.assertTrue(hasattr(my_amenity, "id"))
        self.assertEqual(my_amenity.__class__.__name__, "Amenity")

    def testsave(self):
        """Represent testing method: save."""
        my_amenity = Amenity()
        my_amenity.save()
        self.assertTrue(hasattr(my_amenity, "updated_at"))

    def teststr(self):
        """Method to test __str__ and return format of Amenity."""
        my_amenity = Amenity()
        s = "[{}] ({}) {}".format(my_amenity.__class__.__name__,
                                  str(my_amenity.id), my_amenity.__dict__)
        self.assertEqual(print(s), print(my_amenity))

if __name__ == '__main__':
    unittest.main()
