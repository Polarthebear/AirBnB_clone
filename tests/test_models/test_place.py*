#!/usr/bin/python3
import unittest
from models.place import Place
"""
Defines Place class.
"""


class TestUser(unittest.TestCase):
    """Unittest case for place class."""

    def test_object_Instantiation(self):
        """instantiation class."""
        my_place = Place()

    def testattr(self):
        """Test class method place attributes."""
        my_place = Place()
        self.assertTrue(hasattr(my_place, "created_at"))
        self.assertTrue(hasattr(my_place, "updated_at"))
        self.assertFalse(hasattr(my_place, "random_attr"))
        self.assertTrue(hasattr(my_place, "name"))
        self.assertTrue(hasattr(my_place, "id"))
        self.assertEqual(my_place.name, "")
        self.assertEqual(my_place.city_id, "")
        self.assertEqual(my_place.user_id, "")
        self.assertEqual(self.place.description, "")
        self.assertEqual(my_place.number_rooms, 0)
        self.assertEqual(my_place.number_bathrooms, 0)
        self.assertEqual(my_place.max_guest, 0)
        self.assertEqual(my_place.price_by_night, 0)
        self.assertEqual(my_place.latitude, 0.0)
        self.assertEqual(my_place.longtude, 0.0)
        self.assertEqual(my_place.amenity_ids, [])

    def testsave(self):
        """Test method to save."""
        my_place = Place()
        my_place.save()
        self.assertTrue(hasattr(my_place, "updated_at"))

    def teststr(self):
        """Test Method  __str__format of the BaseModel."""
        my_place = Place()
        s = "[{}] ({}) {}".format(my_place.__class__.__name__,
                                  str(my_place.id), my_place.__dict__)
        self.assertEqual(print(s), print(my_place))

if __name__ == '__main__':
    unittest.main()
