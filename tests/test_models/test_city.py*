#!/usr/bin/python3
import unittest
from models.city import City
"""
Defines City Class.
"""


class TestUser(unittest.TestCase):
    """Unittest for City class."""

    def test_object_Instantiation(self):
        """instantiation class."""
        self.city = City()

    def testattr(self):
        """Test class method for City attributes."""
        my_city = City()
        self.assertTrue(hasattr(my_city, "created_at"))
        self.assertTrue(hasattr(my_city, "updated_at"))
        self.assertFalse(hasattr(my_city, "random_attr"))
        self.assertTrue(hasattr(my_city, "name"))
        self.assertTrue(hasattr(my_city, "id"))
        self.assertEqual(my_city.name, "")
        self.assertEqual(my_city.state_id, "")
        my_city.name = "HolLand"
        my_city.state_id = "HolbertonL0nd"
        self.assertEqual(my_city.name, "HolLand")
        self.assertEqual(my_city.state_id, "HolbertonL0nd")
        self.assertEqual(my_city.__class__.__name__, "City")

    def testsave(self):
        """Test method to save."""
        my_city = City()
        my_city.save()
        self.assertTrue(hasattr(my_city, "updated_at"))

    def teststr(self):
        """Test method __str__format of the BaseModel."""
        my_city = City()
        s = "[{}] ({}) {}".format(my_city.__class__.__name__,
                                  str(my_city.id), my_city.__dict__)
        self.assertEqual(print(s), print(my_city))

if __name__ == '__main__':
    unittest.main()
