#!/usr/bin/python3
"""Defines User class"""

import unittest
import os
from models.user import User
from models.base_model import BaseModel


class TestUser(unittest.TestCase):

    @classmethod
    def setUpClass(clss):
        clss.my_user = User()
        clss.my_user.first_name = "Betty"
        clss.my_user.last_name = "Holberton"
        clss.my_user.email = "airbnb@holbertonshool.com"
        clss.my_user.password = "root"

    @classmethod
    def tearDownClass(cls):
        del clss.my_user
        try:
            os.remove("file.json")
        except FileNotFoundError:
            pass

    def test_is_subclass(self):
        self.assertTrue(issubclass(my_user.__class__, BaseModel), True)

    def test_checking_for_functions(self):
        self.assertIsNotNone(User.__doc__)

    def test_has_attributes(self):
        self.assertTrue('email' in my_user.__dict__)
        self.assertTrue('id' in my_user.__dict__)
        self.assertTrue('created_at' in my_user.__dict__)
        self.assertTrue('updated_at' in my_user.__dict__)
        self.assertTrue('password' in my_user.__dict__)
        self.assertTrue('first_name' in my_user.__dict__)
        self.assertTrue('last_name' in my_user.__dict__)

    def test_attributes_are_strings(self):
        self.assertEqual(type(my_user.email), str)
        self.assertEqual(type(my_user.password), str)
        self.assertEqual(type(my_user.first_name), str)
        self.assertEqual(type(my_user.first_name), str)

    def test_save(self):
        my_user.save()
        self.assertNotEqual(my_user.created_at, my_user.updated_at)

    def test_to_dict(self):
        self.assertEqual('to_dict' in dir(my_user), True)


if __name__ == "__main__":
    unittest.main()
