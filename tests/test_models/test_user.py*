#!/usr/bin/python3
"""Defines unnittests user model class.
Unittest classes:
    TestUser_instantiation
    TestUser_save
    TestUser_dict
"""
import os
import models
import unittest
from datetime import datetime
from time import sleep
from models.user import User


class TestUser_instantiation(unittest.TestCase):
    """Unitteststo test the instantiation User class."""

    def test_no_args_instantiates(self):
        self.assertEqual(User, type(User()))

    def test_new_instance_stored_in_objects(self):
        self.assertIn(User(), models.storage.all().values())

    def test_id_is_public_str(self):
        self.assertEqual(str, type(User().id))

    def test_created_at_is_public_datetime(self):
        self.assertEqual(datetime, type(User().created_at))

    def test_updated_at_is_public_datetime(self):
        self.assertEqual(datetime, type(User().updated_at))

    def test_email_is_public_str(self):
        self.assertEqual(str, type(User.email))

    def test_password_is_public_str(self):
        self.assertEqual(str, type(User.password))

    def test_first_name_is_public_str(self):
        self.assertEqual(str, type(User.first_name))

    def test_last_name_is_public_str(self):
        self.assertEqual(str, type(User.last_name))

    def test_two_users_unique_ids(self):
        my_userA = User()
        my_userB = User()
        self.assertNotEqual(my_userA.id, my_userB.id)

    def test_two_users_different_created_at(self):
        my_userA = User()
        sleep(0.05)
        my_userB = User()
        self.assertLess(my_userA.created_at, my_userB.created_at)

    def test_two_users_different_updated_at(self):
        my_userA = User()
        sleep(0.05)
        my_userB = User()
        self.assertLess(my_userA.updated_at, my_userB.updated_at)

    def test_str_representation(self):
        date = datetime.today()
        date_repr = repr(date)
        my_user = User()
        my_user.id = "123456"
        my_user.created_at = my_user.updated_at = date
        my_userstr = my_user.__str__()
        self.assertIn("[User] (123456)", my_userstr)
        self.assertIn("'id': '123456'", my_userstr)
        self.assertIn("'created_at': " + date_repr, my_userstr)
        self.assertIn("'updated_at': " + date_repr, my_userstr)

    def test_args_unused(self):
        my_user = User(None)
        self.assertNotIn(None, us.__dict__.values())

    def test_instantiation_with_kwargs(self):
        date = datetime.today()
        date_iso = date.isoformat()
        my_user = User(id="345", created_at=date_iso, updated_at=date_iso)
        self.assertEqual(my_user.id, "345")
        self.assertEqual(my_user.created_at, date)
        self.assertEqual(my_user.updated_at, date)

    def test_instantiation_with_None_kwargs(self):
        with self.assertRaises(TypeError):
            User(id=None, created_at=None, updated_at=None)


class TestUser_save(unittest.TestCase):
    """Unittests to save and test method class."""

    @classmethod
    def setUp(self):
        try:
            os.rename("file.json", "tmp")
        except IOError:
            pass

    def tearDown(self):
        try:
            os.remove("file.json")
        except IOError:
            pass
        try:
            os.rename("tmp", "file.json")
        except IOError:
            pass

    def test_one_save(self):
        my_user = User()
        sleep(0.05)
        first_updated_at = my_user.updated_at
        my_user.save()
        self.assertLess(first_updated_at, umy_user.updated_at)

    def test_two_saves(self):
        my_user = User()
        sleep(0.05)
        first_updated_at = my_user.updated_at
        my_user.save()
        second_updated_at = my_user.updated_at
        self.assertLess(first_updated_at, second_updated_at)
        sleep(0.05)
        my_user.save()
        self.assertLess(second_updated_at, my_user.updated_at)

    def test_save_with_arg(self):
        my_user = User()
        with self.assertRaises(TypeError):
            my_user.save(None)

    def test_save_updates_file(self):
        my_user = User()
        my_user.save()
        usid = "User." + us.id
        with open("file.json", "r") as f:
            self.assertIn(usid, f.read())


class TestUser_dict(unittest.TestCase):
    """Unittests to test method User class."""

    def test_dict_type(self):
        self.assertTrue(dict, type(User()_dict()))

    def test_dict_contains_correct_keys(self):
        my_user = User()
        self.assertIn("id", my_user_dict())
        self.assertIn("created_at", my_user_dict())
        self.assertIn("updated_at", my_user_dict())
        self.assertIn("__class__", my_user_dict())

    def test_dict_contains_added_attributes(self):
        my_user = User()
        my_user.middle_name = "Holberton"
        my_user.a_number = 98
        self.assertEqual("Holberton", my_user.middle_name)
        self.assertIn("a_number", my_user_dict())

    def test_dict_datetime_attributes_are_strs(self):
        my_user = User()
        my_user_dict = my_user._dict()
        self.assertEqual(str, type(my_user_dict["id"]))
        self.assertEqual(str, type(my_user_dict["created_at"]))
        self.assertEqual(str, type(my_user_dict["updated_at"]))

    def test_dict_output(self):
        date = datetime.today()
       my_user = User()
        my_user.id = "123456"
        my_user.created_at = my_user.updated_at = date
        t_dict = {
            'id': '123456',
            '__class__': 'User',
            'created_at': date.isoformat(),
            'updated_at': date.isoformat(),
        }
        self.assertDictEqual(my_user_dict(), t_dict)

    def test_contrast_dict_dunder_dict(self):
        my_user = User()
        self.assertNotEqual(my_user_dict(), my_user.__dict__)

    def test_dict_with_arg(self):
        my_user = User()
        with self.assertRaises(TypeError):
            my_user_dict(None)


if __name__ == "__main__":
    unittest.main()
